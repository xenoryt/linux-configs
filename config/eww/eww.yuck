;; includes
(include "yuck/variables.yuck")
(include "yuck/notifications.yuck")
(include "yuck/sidebar/music.yuck")
(include "yuck/sidebar/apatheia.yuck")
(include "yuck/sidebar/sys-tray.yuck")
(include "yuck/sidebar/clipboard.yuck")
(include "yuck/sidebar/sidebar.yuck")
(include "yuck/widgets/system.yuck")
(include "yuck/widgets/audio.yuck")

;; Variables
(defpoll clock_time :interval "5s" "date '+%I:%M %p'")
(defpoll clock_date :interval "1h" "date '+%b %d, %Y'")
(defpoll calendar_day :interval "2h" "date '+%d'")
(defpoll calendar_year :interval "2h" "date '+%Y'")
(defpoll volume_percent :interval "5s"  "pamixer --get-volume")
(defpoll mic_percent :interval "3s" "pamixer --get-volume --default-source")
(defpoll COL_WLAN :interval "1m" "scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "scripts/wifi --ICON")
(defpoll MIC_ICON :interval "3s" "scripts/mic-icon")
(deflisten workspace0 "scripts/workspace 0")
(deflisten workspace1 "scripts/workspace 1")
(deflisten workspace2 "scripts/workspace 2")
(deflisten workspace_data :initial "[]" "scripts/workspace-data")
(deflisten appname "scripts/appname")

; https://github.com/elkowar/eww/issues/382#issuecomment-1281693594

;(defvar EWW_CMD "eww -c $HOME/.config/eww")

(defvar vol_reveal false)
(defvar br_reveal false)
(defvar control_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)


;; widgets

(defwidget launcher []
  (box
    :class "launcher_module"
    :orientation "h"
    (button
      :onclick "wofi -mia --show drun"
      (image
        :class "launcher-icon"
        :path "assets/blossom.png"
      :image-width 28))
  ))

(defwidget workspaces [monitor]
  (eventbox :onscroll "echo {} | sed -e 's/up/-1/g' -e 's/down/+1/g' | xargs hyprctl dispatch workspace"
    (box  :class "workspaces"  :orientation "h" :spacing 5 :space-evenly "false" :valign "center"
      (for w in {workspace_data[monitor]}
        (button :onclick "~/.config/hypr/scripts/workspace use ${w.index}"
                :class "ws-btn ${w.focused ? 'focused' : ''} ${w.occupied ? 'occupied' : ''}" 
          '${w.icon}')
        ))))

  ;(literal
  ;  :content workspace1
  ;:valign "center"))

(defwidget appnames []
  (eventbox
    :onhover "${EWW_CMD} update control_reveal=true"
    :onhoverlost "${EWW_CMD} update control_reveal=false"
    (box
      :orientation "h"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (literal
      :content appname)
      (revealer
        :transition "slideright"
        :reveal control_reveal
        :duration "350ms"
        (box
          :vexpand "false"
          :hexpand "false"
          :orientation "h"
          :space-evenly "true"
          (button
            :class "app-button"
          :onclick "hyprctl dispatch togglefloating 1" "")
          (button
            :class "app-button"
          :onclick "hyprctl dispatch fullscreen 1" "")
          (button ; use "eventbox" with : ":cursor pointer" for poiner cursor
            :class "app-button color-var3"
            :cursor "pointer"
          :onclick "hyprctl dispatch killactive 1" ""))))))

(defwidget volume []
  (eventbox
    :onhover "${EWW_CMD} update vol_reveal=true"
    :onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
      :space-evenly false
      :orientation "h"
      :spacing "3"
      (revealer
        :transition "slideright"
        :reveal vol_reveal
        :duration "350ms"
        (scale
          :class "volbar"
          :value volume_percent
          :orientation "h"
          :round-digits 0
          :tooltip "${volume_percent}%"
          :max 100
          :min 0
          :onchange "~/.config/hypr/scripts/volume set {}" ))
      (button
        :onclick "scripts/pop audio_ctl"
        :class "volume_icon"
        ""))))

(defwidget mic []
  (box
    :spacing 3
    (button
      :class "volume_icon"
      MIC_ICON)))

(defwidget wifi []
  (eventbox
    :onhover "${EWW_CMD} update wifi_rev=true"
    :onhoverlost "${EWW_CMD} update wifi_rev=false"
    (box
      :vexpand "false"
      :hexpand "false"
      :space-evenly "false"
      (revealer
        :transition "slideright"
        :reveal wifi_rev
        :duration "350ms"
        (label
          :class "module_essid"
          :text ESSID_WLAN
        ))
      (button
        :class "module-wifi"
        :onclick "~/.config/hypr/scripts/exec_wofi wifi"
      WLAN_ICON))))

(defwidget bat []
  (box
    :class "bat module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_BATTERY["BAT0"].capacity}
      :class "batbar"
      :thickness 4
      (button
        :onclick "scripts/pop system"
        :class "icon"
        :tooltip "battery on ${EWW_BATTERY["BAT0"].capacity}%"
      ""))))

(defwidget cpu []
  (box
    :class "cpu module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_CPU.avg}
      :thickness 4
      (button
        :onclick "scripts/pop system"
        :class "icon"
        :tooltip "using ${round(EWW_CPU.avg, 2)}% cpu"
        :show_truncated false
        :wrap false
      ""))))

(defwidget mem []
  (box
    :class "mem module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_RAM.used_mem_perc}
      :class "membar"
      :thickness 4
      (button
        :onclick "scripts/pop system"
        :class "icon"
        :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
        :show_truncated false
        :wrap false
      ""))))

(defwidget clock_module []
  (eventbox
    :onhover "${EWW_CMD} update time_rev=true"
    :onhoverlost "${EWW_CMD} update time_rev=false"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "0"
      (label
        :text clock_time
      :class "clock_time_class" )
      (revealer :transition "slideleft"
        :reveal time_rev
        :duration "350ms"
        (button
          :class "clock_date_class"
        :onclick "scripts/pop calendar" clock_date)))))

(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
      :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label
      :text ""))))

(defwidget sep []
  (box
    :vexpand "false"
    :hexpand "false"
    :valign "center"
    (label
      :class "bar-separator"
      :valign "center"
      :text "|"
    )))

(defwidget gap []
  (box
    :orientation "h"
    :hexpand "false"
    :visible "true"
  :width "150"))


;;define widget groups
(defwidget left [monitor]
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "left_modules"
    (launcher)
    (sep)
    (workspaces :monitor monitor)))
(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :class "center_modules"
    (appnames)))
(defwidget right []
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"
    :class "right_modules"
    (sep)
    ;(bright)
    (volume)
    (mic)
    (wifi)
    (sep)
    ;(bat)
    (cpu)
    (mem)
    (sep)
    (clock_module)
    ;(notif_button)
    ;(sys-tray)
  ))

(defwidget bar_layout [monitor]
  (centerbox
    :class "bar_class"
    :orientation "h"
    (left :monitor monitor)
    (center)
    (right)
  ))

;; bars for your 3 screens (one for each)
(defwindow bar0
  :monitor 0
  :exclusive false
  :geometry (geometry
    :width "100%"
    :height "30px"
  :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  :reserve (struts :distance "40px" :side "top")
  (bar_layout :monitor 0))
(defwindow bar1
  :monitor 1
  :exclusive false
  :geometry (geometry
    :width "100%"
    :height "30px"
    :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  :reserve (struts :distance "40px" :side "top")
  (bar_layout :monitor 1)
  )
(defwindow bar2
  :monitor 2
  :exclusive false
  :geometry (geometry
    :width "100%"
    :height "30px"
  :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  :reserve (struts :distance "40px" :side "top")
  (bar_layout :monitor 2))

  (defwindow audio_ctl0
    :stacking "fg"
    :focusable "false"
    ;:screen 1
    :monitor 0
    :geometry (geometry
      :x "20"
      :y "5%"
      :anchor "top right"
      :width "280px"
    :height "60px")
    (audio))

(defwindow audio_ctl1
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 1
  :geometry (geometry
    :x "20"
    :y "5%"
    :anchor "top right"
    :width "280px"
  :height "60px")
  (audio))

(defwindow audio_ctl2
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 2
  :geometry (geometry
    :x "20"
    :y "5%"
    :anchor "top right"
    :width "280px"
  :height "60px")
  (audio))

(defwindow system0
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 0
  :geometry
  (geometry
    :x "20"
    :y "5%"
    :anchor "top right"
    :width "290px"
  :height "120px")
  (system))

(defwindow system1
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 1
  :geometry
  (geometry
    :x "20"
    :y "5%"
    :anchor "top right"
    :width "290px"
  :height "120px")
  (system))

(defwindow system2
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 2
  :geometry
  (geometry
    :x "20"
    :y "5%"
    :anchor "top right"
    :width "290px"
  :height "120px")
  (system))

;;Calendar Widget
(defwidget cal []
  (box
    :class "cal"
    :orientation "v"
    (box
      :class "cal-in"
      (calendar
        :day calendar_day
        :year calendar_year))))

(defwindow calendar0
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 0
  :geometry (geometry
    :x "20"
    :y "5%"
    :anchor "top right"
    :width "270px"
  :height "60px")
  (cal))

(defwindow calendar1
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 1
  :geometry (geometry
    :x "20"
    :y "5%"
    :anchor "top right"
    :width "270px"
  :height "60px")
  (cal))

(defwindow calendar2
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 2
  :geometry (geometry
    :x "20"
    :y "5%"
    :anchor "top right"
    :width "270px"
  :height "60px")
  (cal))
